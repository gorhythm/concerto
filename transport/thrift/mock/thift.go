// Copyright 2024 The Concerto Contributors.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/apache/thrift/lib/go/thrift (interfaces: TClient)
//
// Generated by this command:
//
//	mockgen -destination=./mock/thift.go -copyright_file=./copyright.txt -package=mock github.com/apache/thrift/lib/go/thrift TClient
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	thrift "github.com/apache/thrift/lib/go/thrift"
	gomock "go.uber.org/mock/gomock"
)

// MockTClient is a mock of TClient interface.
type MockTClient struct {
	ctrl     *gomock.Controller
	recorder *MockTClientMockRecorder
}

// MockTClientMockRecorder is the mock recorder for MockTClient.
type MockTClientMockRecorder struct {
	mock *MockTClient
}

// NewMockTClient creates a new mock instance.
func NewMockTClient(ctrl *gomock.Controller) *MockTClient {
	mock := &MockTClient{ctrl: ctrl}
	mock.recorder = &MockTClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTClient) EXPECT() *MockTClientMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockTClient) Call(arg0 context.Context, arg1 string, arg2, arg3 thrift.TStruct) (thrift.ResponseMeta, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(thrift.ResponseMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockTClientMockRecorder) Call(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockTClient)(nil).Call), arg0, arg1, arg2, arg3)
}
